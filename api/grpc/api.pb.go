// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_struct "github.com/golang/protobuf/ptypes/struct"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	EventType            string          `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	Ts                   int64           `protobuf:"varint,2,opt,name=ts,proto3" json:"ts,omitempty"`
	Params               *_struct.Struct `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *Event) GetTs() int64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *Event) GetParams() *_struct.Struct {
	if m != nil {
		return m.Params
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "timeseries.api.v1.event")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x8f, 0x41, 0x4a, 0xc4, 0x40,
	0x10, 0x45, 0xed, 0x8c, 0x06, 0x52, 0x0e, 0x82, 0xbd, 0xd0, 0x10, 0x15, 0xc2, 0xac, 0xb2, 0xea,
	0xe0, 0x78, 0x01, 0x11, 0xe7, 0x02, 0x89, 0x2b, 0x37, 0x92, 0x09, 0x65, 0x68, 0xb0, 0xed, 0xa6,
	0xba, 0x26, 0x90, 0x8b, 0x78, 0x5e, 0x49, 0x45, 0x37, 0xce, 0xce, 0x5d, 0xf1, 0xff, 0xe7, 0x3d,
	0x0a, 0xb2, 0x2e, 0x58, 0x13, 0xc8, 0xb3, 0xd7, 0x97, 0x6c, 0x1d, 0x46, 0x24, 0x8b, 0xd1, 0xcc,
	0xe9, 0x78, 0x5f, 0xdc, 0x0c, 0xde, 0x0f, 0x1f, 0x58, 0xcb, 0x60, 0x7f, 0x78, 0xaf, 0xd1, 0x05,
	0x9e, 0x96, 0x7d, 0x71, 0xfb, 0xb7, 0x8c, 0x4c, 0x87, 0x9e, 0x97, 0x76, 0x33, 0xc0, 0x19, 0x8e,
	0xf8, 0xc9, 0xfa, 0x0e, 0x40, 0x8e, 0x37, 0x9e, 0x02, 0xe6, 0xaa, 0x54, 0x55, 0xd6, 0x64, 0x92,
	0xbc, 0x4c, 0x01, 0xf5, 0x05, 0x24, 0x1c, 0xf3, 0xa4, 0x54, 0xd5, 0xaa, 0x49, 0x38, 0xea, 0x1a,
	0xd2, 0xd0, 0x51, 0xe7, 0x62, 0xbe, 0x2a, 0x55, 0x75, 0xbe, 0xbd, 0x36, 0x8b, 0xc6, 0xfc, 0x6a,
	0x4c, 0x2b, 0x9a, 0xe6, 0x67, 0xb6, 0xfd, 0x52, 0xb0, 0xde, 0xcd, 0xb8, 0x16, 0x69, 0xb4, 0x3d,
	0xea, 0x47, 0x80, 0x96, 0x3d, 0xa1, 0x84, 0x3a, 0x37, 0x47, 0x6f, 0x19, 0xb1, 0x17, 0x57, 0x47,
	0xe4, 0xdd, 0xfc, 0xdd, 0xe6, 0x44, 0x3f, 0xc3, 0xba, 0x65, 0xc2, 0xce, 0x09, 0x22, 0xfe, 0x87,
	0x51, 0xa9, 0xa7, 0xf4, 0xf5, 0x74, 0xa0, 0xd0, 0xef, 0x53, 0xe9, 0x1e, 0xbe, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xdc, 0x02, 0xac, 0x4a, 0x6b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	StoreEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error)
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventService_StreamEventsClient, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) StoreEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/timeseries.api.v1.EventService/StoreEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (EventService_StreamEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_EventService_serviceDesc.Streams[0], "/timeseries.api.v1.EventService/StreamEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventServiceStreamEventsClient{stream}
	return x, nil
}

type EventService_StreamEventsClient interface {
	Send(*Event) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type eventServiceStreamEventsClient struct {
	grpc.ClientStream
}

func (x *eventServiceStreamEventsClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventServiceStreamEventsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	StoreEvent(context.Context, *Event) (*empty.Empty, error)
	StreamEvents(EventService_StreamEventsServer) error
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_StoreEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).StoreEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timeseries.api.v1.EventService/StoreEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).StoreEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventServiceServer).StreamEvents(&eventServiceStreamEventsServer{stream})
}

type EventService_StreamEventsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type eventServiceStreamEventsServer struct {
	grpc.ServerStream
}

func (x *eventServiceStreamEventsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventServiceStreamEventsServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timeseries.api.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreEvent",
			Handler:    _EventService_StoreEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _EventService_StreamEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
